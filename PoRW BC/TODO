# PoRW Blockchain Project TODO List

**Status as of:** April 6, 2025
**Based on:** Hybrid PoRW/PoRS Model Implementation

This list outlines the key tasks remaining or needing refinement following the implementation of the core hybrid data structures and initial consensus logic.

## Core Logic (`src/porw_blockchain/core/`)

-   [ ] **Consensus:** Implement PoRW proof validation logic in `consensus.py` (replace placeholder `validate_porw_proof`). (Requires Protein Folding module)
-   [ ] **Consensus:** Implement PoRS proof validation logic in `consensus.py` (replace placeholder `validate_pors_proof`). (Requires P2P Quorum implementation) (Greg/Robert/Bill)
-   [ ] **Consensus:** Refine PoRW reward calculation (`calculate_porw_reward`) for robust 2% inflation targeting (consider total supply). (Greg/Bill)
-   [ ] **Consensus:** Integrate real balance checking into `validate_transaction` (depends on `crypto_utils.get_balance` implementation). (Greg/Robert)
-   [ ] **Crypto:** Implement real `get_balance` function in `crypto_utils.py` (query transaction history from DB). (Greg/Robert)
-   [ ] **Crypto:** Implement proper address derivation/generation in `crypto_utils.py` (replace placeholder `get_address_from_pubkey`).
-   [ ] **Protein Folding:** Implement actual protein folding simulation in `protein_folding.py` (replace placeholder).
-   [ ] **Protein Folding:** Implement actual evaluation logic for protein folding results (used by `consensus.validate_porw_proof`).
-   [ ] **Block Generation:** Create logic/module for *generating* new PoRW and PoRS blocks (distinct from validation). (Likely involves Node/Miner component)

## Storage Layer (`src/porw_blockchain/storage/`)

-   [x] **Models:** Define distinct PoRW/PoRS structures (`structures.py`). (Done)
-   [x] **Models:** Implement corresponding SQLAlchemy models using STI (`models.py`). (Done)
-   [ ] **CRUD:** Update `crud.py` functions (`create_db_block`, getters) to correctly handle the polymorphic `DbBlock` types (PoRW/PoRS specific fields). (Greg/Bill)
-   [ ] **CRUD:** Implement full CRUD operations for `DbTransaction`. (Greg/Robert)
-   [ ] **CRUD:** Implement database queries needed for `crypto_utils.get_balance`. (Greg/Robert)
-   [ ] **CRUD:** Implement `get_latest_block_by_type` function used in `consensus.py`. (Greg/Bill)
-   [ ] **Migrations:** Set up Alembic (or similar) for database schema migrations.

## Node / P2P Layer (`src/porw_blockchain/node/`)

-   [ ] **P2P:** Define and implement specific P2P message types/formats for: (Greg/Node Team)
    -   PoRS quorum challenges/responses/results.
    -   PoRW data submission/validation notifications.
    -   Block propagation (PoRW & PoRS).
    -   Transaction propagation.
    -   Node status exchange (including chain height, block types).
-   [ ] **P2P:** Implement PoRS quorum mechanism logic (node selection, message handling, result tallying). (Greg/Robert/Bill)
-   [ ] **Sync:** Update `sync.py` to handle synchronization of both PoRW and PoRS blocks.
-   [ ] **Sync:** Implement robust handling for chain forks/reorganizations.
-   [ ] **Operational:** Implement "Carbon Tax" / Green Incentive mechanism logic (adjusting node participation/rewards).

## API Layer (`src/porw_blockchain/rpc/`)

-   [ ] **Schemas:** Update API schemas (`schemas.py`) to accurately reflect PoRW/PoRS block differences if needed for specific endpoints.
-   [ ] **Routers:** Update block routers (`routers/blocks.py`) to potentially return different details based on block type or add type-specific endpoints. (API Team)
-   [ ] **Routers:** Implement API endpoint for submitting new user transactions. (Greg/Robert/API Team)
-   [ ] **Routers:** Implement API endpoint for submitting PoRW data/proofs. (API Team)
-   [ ] **Routers:** Implement API endpoint for querying PoRS status/quorum details. (API Team)
-   [ ] **Routers:** Implement API endpoint to get address balance (depends on `crypto_utils.get_balance`). (API Team)

## Testing (`tests/`)

-   [ ] **Core:** Add tests for `consensus.py` functions (reward calculation, PoRW/PoRS specific validation).
-   [ ] **Core:** Add tests for `crypto_utils.py` (address derivation, balance calculation).
-   [ ] **Storage:** Add tests for updated `crud.py` functions (polymorphic blocks, transaction CRUD).
-   [ ] **API:** Add tests for all API endpoints (including new ones for transactions, PoRW/PoRS).
-   [ ] **P2P:** Develop strategy and implement tests for P2P interactions (mocking peers, testing sync/quorum).
-   [ ] **Integration:** Add integration tests covering block creation -> P2P propagation -> validation -> storage.

## Client (`client/`)

-   [ ] **Setup:** Initialize React/Vite project structure. (Gina)
-   [ ] **Display:** Implement basic UI to fetch and display block information (both types) from the API. (Gina)
-   [ ] **Interaction:** Implement UI for submitting transactions. (Gina)
-   [ ] **Interaction:** Implement UI for viewing PoRW details (protein data refs, rewards). (Gina)

## Documentation (`docs/`)

-   [ ] **Architecture:** Update `architecture.rst` to detail the hybrid consensus flow. (Jeffery)
-   [ ] **API:** Update `api.rst` to reflect new/updated endpoints. (Jeffery)
-   [ ] **Core:** Add docstrings/documentation for new consensus logic, structures, etc. (All Devs)
-   [ ] **Setup:** Ensure `README.md` and setup guides are current. (Jeffery)

